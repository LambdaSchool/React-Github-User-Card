{"version":3,"sources":["components/UserCard.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","width","marginBottom","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","moreInfoHeader","fontWeight","fontSize","color","UserCard","props","classes","React","useState","expanded","setExpanded","Card","className","CardMedia","image","user","avatar_url","title","login","CardHeader","subheader","html_url","CardActions","disableSpacing","IconButton","aria-label","clsx","onClick","aria-expanded","Collapse","in","timeout","unmountOnExit","CardContent","Typography","component","variant","arr","progress","margin","spacing","CircularIndeterminate","CircularProgress","CardList","state","firstOrderList","secondOrderList","users","fetch","method","headers","then","res","json","forEach","obj","push","map","thirdOrderList","setState","catch","err","console","log","this","length","reduce","unique","item","includes","u","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca5ff09c.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport clsx from 'clsx';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    width: 276,\n    marginBottom: '32px',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  moreInfoHeader: {\n    fontWeight: 600,\n    fontSize: 16,\n    color: 'rgba(0, 0, 0, 0.87)',\n  },\n}));\n\nexport default function UserCard(props) {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  function handleExpandClick() {\n    setExpanded(!expanded);\n  }\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.media}\n        image={props.user.avatar_url}\n        title={props.user.login}\n      />\n      <CardHeader\n        title={props.user.login}\n        subheader={props.user.html_url}\n      />\n      <CardActions disableSpacing>\n        <IconButton aria-label=\"add to favorites\">\n          <FavoriteIcon />\n        </IconButton>\n        <IconButton aria-label=\"share\">\n          <ShareIcon />\n        </IconButton>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>        \n        <CardContent>\n          <Typography className={classes.moreInfoHeader} component=\"p\">\n            Projects\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10\n            minutes.\n          </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}","import React from 'react';\nimport UserCard from './UserCard';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nlet arr = []\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2),\n    },\n}));\n\nfunction CircularIndeterminate() {\n    const classes = useStyles();\n  \n    return (\n      <div className=\"loader\">\n        <CircularProgress className={classes.progress} color=\"secondary\" />\n      </div>\n    );\n}\n\nclass CardList extends React.Component {\n    \n    state = {\n        firstOrderList: [],\n        secondOrderList: [],\n        users: [],\n    }\n    \n    // FilterProfiles = () => {\n    //     this.state.users.filter((item, index) => this.state.users.indexOf(item) === index).map( u => {\n    //         return (\n    //             <UserCard user={u} />\n    //         )\n    //     })\n    // }\n\n    componentDidMount() {\n        fetch('https://api.github.com/users/benjidoyle/followers', {\n            method: 'GET',\n            headers: {\n                'User-Agent': 'request'\n            }\n        })\n            .then( res => res.json() )\n            .then( firstOrderList => {                \n                firstOrderList.forEach( obj => {\n                    arr.push(obj);                    \n                })\n                firstOrderList.map( obj => {\n                    fetch(`https://api.github.com/users/${obj.login}/followers`, {\n                        method: 'GET',\n                        headers: {\n                            'User-Agent': 'request'\n                        }\n                    })\n                        .then( res => res.json())\n                        .then( secondOrderList => {\n                            secondOrderList.forEach( obj => {\n                                arr.push(obj)\n                            })\n                            secondOrderList.map( obj => {\n                                fetch(`https://api.github.com/users/${obj.login}/followers`, {\n                                    method: 'GET',\n                                    headers: {\n                                       'User-Agent': 'request'\n                                    }\n                                })\n                                .then( res => res.json())\n                                .then( thirdOrderList => {\n                                    thirdOrderList.forEach( obj => {\n                                        arr.push(obj)\n                                    })                                \n                                })\n                                .then( this.setState({ users: arr }))\n                            })\n                        })\n                        .catch( err => console.log('Second fetch error: ', err))\n                })\n            })\n            .catch( err => console.log('First fetch error: ', err));\n    }\n \n    render() {\n        if (this.state.users.length >= 1) {\n            return (\n                <div className=\"App\">\n                    {                       \n                        this.state.users.reduce((unique, item) => \n                            unique.includes(item) ? unique : [...unique, item], []\n                        ).map( u => {\n                            return (\n                                <UserCard user={u} />\n                            )\n                        })\n                    }\n                </div>\n            )\n        }\n        else {\n            return (\n                <div className=\"App\">\n                    <CircularIndeterminate />\n                </div>\n            )\n        }\n    }\n}\n\nexport default CardList;","import React from 'react';\nimport CardList from './components/CardList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}